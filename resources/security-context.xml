<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:util="http://www.springframework.org/schema/util"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security-4.0.xsd
           http://www.springframework.org/schema/util 
           http://www.springframework.org/schema/util/spring-util-4.0.xsd
           http://www.springframework.org/schema/security/oauth2 
           http://www.springframework.org/schema/security/spring-security-oauth2.xsd">

    <!--beans:bean class="kr.co.sunnyvale.common.FilterModifiy"/-->
    <http pattern="/resources/**" security="none" />

    <http auto-config="true" use-expressions="true" disable-url-rewriting="false">
        <csrf disabled="true"/>
        <!-- OAuth 2.0 로직을 적용 시키기 위한 Filter 설정 -->
        <custom-filter ref="oauth2ClientFilter" after="EXCEPTION_TRANSLATION_FILTER"/>
        <custom-filter ref="oauthFilter" before="FILTER_SECURITY_INTERCEPTOR"/>

        <intercept-url pattern="/login*" access="isAnonymous()" requires-channel="http"/>
        <intercept-url pattern="/j_spring_*" access="isAnonymous()" requires-channel="http"/>
        <intercept-url pattern="/user/write" access="isAnonymous()" requires-channel="http"/>
        <intercept-url pattern="/user/**" access="authenticated" requires-channel="http"/>
        <intercept-url pattern="/oauth/callback" access="authenticated" requires-channel="http"/>
        <intercept-url pattern="/oauth/**" access="authenticated" requires-channel="http"/>
        <intercept-url pattern="/check/**" access="permitAll" requires-channel="http"/>
        <intercept-url pattern="/**" requires-channel="http"/>
        <intercept-url pattern="/board/*/write" access="hasAnyRole('ROLE_USER_01', 'ROLE_USER_02', 'ROLE_USER_03')"/>
        <intercept-url pattern="/admin/**" access="hasRole('ROLE_ROOT')"/>
        <intercept-url pattern="/logout" access="permitAll" />
        <intercept-url pattern="/home" access="permitAll" />
        <intercept-url pattern="/about" access="permitAll" />
        <intercept-url pattern="/sample" access="hasRole('ROLE_ROOT')" />

        <form-login login-page="/login"
                    username-parameter="j_username"
                    password-parameter="j_password"
                    authentication-success-handler-ref="sampleSuccessHandler"
                    authentication-failure-handler-ref="sampleFailureHandler"/>

        <access-denied-handler error-page="/error/denied" />

        <session-management>
            <concurrency-control max-sessions="3" expired-url="/error/maxSession"/>
        </session-management>

        <logout invalidate-session="true" delete-cookies="JSESSIONID" logout-url="/logout" logout-success-url="/logout/success"/>
    </http>

    <beans:bean id="sampleSuccessHandler" class="kr.co.sunnyvale.authentication.sample.SampleSuccessHandler"/>
    <beans:bean id="sampleFailureHandler" class="kr.co.sunnyvale.authentication.sample.SampleFailureHandler"/>

    <beans:bean id="oauthSuccessHandler" class="kr.co.sunnyvale.authentication.common.OAuthSuccessHandler"/>
    <beans:bean id="oauthFailureHandler" class="kr.co.sunnyvale.authentication.common.OAuthFailureHandler"/>

    <authentication-manager alias="authenticationManager">
        <authentication-provider ref="sampleAuthenticationProvider"/>
        <authentication-provider ref="facebookAuthenticationProvider"/>
        <authentication-provider ref="daumAuthenticationProvider"/>
    </authentication-manager>

    <!-- Facebook OAuth 2.0 Client Setup -->
    <oauth:resource id="facebook" type="authorization_code"
                    client-id="#{facebookProp['facebook.client-id']}"
                    client-secret="#{facebookProp['facebook.client-secret']}"
                    access-token-uri="#{facebookProp['facebook.access-token-uri']}"
                    user-authorization-uri="#{facebookProp['facebook.user-authorization-uri']}"
                    authentication-scheme="query"
                    token-name="access_token"
                    pre-established-redirect-uri="/"
                    client-authentication-scheme="form"/>

    <oauth:resource id="daum" type="authorization_code"
                    client-id="#{daumProp['daum.client-id']}"
                    client-secret="#{daumProp['daum.client-secret']}"
                    access-token-uri="#{daumProp['daum.access-token-uri']}"
                    user-authorization-uri="#{daumProp['daum.user-authorization-uri']}"
                    authentication-scheme="query"
                    token-name="access_token"
                    pre-established-redirect-uri="/"
                    client-authentication-scheme="form"/>

    <!-- Facebook 서버에 접속하기 위한 RestTemplate -->
    <oauth:rest-template id="facebookRestTemplate" resource="facebook"/>
    <oauth:rest-template id="daumRestTemplate" resource="daum"/>

    <!-- OAuth 2.0 Client를 연동 시키기 위한 Filter 생성 -->
    <oauth:client id="oauth2ClientFilter" />

    <!-- Facebook 에서 데이터를 가져 오기 위한 Service -->
    <beans:bean id="facebookService" class="kr.co.sunnyvale.authentication.facebook.FacebookService">
        <beans:property name="facebookRestTemplate" ref="facebookRestTemplate" />
        <beans:property name="profileUri" value="#{facebookProp['facebook.profile-uri']}" />
    </beans:bean>

    <beans:bean id="daumService" class="kr.co.sunnyvale.authentication.daum.DaumService">
        <beans:property name="daumRestTemplate" ref="daumRestTemplate"/>
        <beans:property name="profileUri" value="#{daumProp['daum.profile-uri']}"/>
    </beans:bean>

    <beans:bean id="encoder" class="org.springframework.security.crypto.password.StandardPasswordEncoder"/>
    <beans:bean id="sampleDetailsService" class="kr.co.sunnyvale.authentication.sample.SampleDetailsService"/>

    <beans:bean id="oauthFilter" class="kr.co.sunnyvale.authentication.common.OAuthProcessingFilter">
        <beans:property name="authenticationManager" ref="authenticationManager"/>
        <beans:property name="authenticationSuccessHandler" ref="oauthSuccessHandler"/>
        <beans:property name="authenticationFailureHandler" ref="oauthFailureHandler"/>
    </beans:bean>

    <beans:bean id="facebookAuthenticationProvider" class="kr.co.sunnyvale.authentication.facebook.FacebookAuthenticationProvider">
        <beans:property name="facebookService" ref="facebookService"/>
    </beans:bean>

    <beans:bean id="daumAuthenticationProvider" class="kr.co.sunnyvale.authentication.daum.DaumAuthenticationProvider">
        <beans:property name="daumService" ref="daumService"/>
    </beans:bean>

    <beans:bean id="sampleAuthenticationProvider" class="kr.co.sunnyvale.authentication.sample.SampleAuthenticationProvider">
        <beans:property name="passwordEncoder" ref="encoder"/>
        <beans:property name="userDetailsService" ref="sampleDetailsService"/>
    </beans:bean>

</beans:beans>